name: Django CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: thos
          POSTGRES_DB: webEmpresa
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libjpeg-dev zlib1g-dev libpng-dev postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt

    - name: Set up Database and Run Migrations
      env:
        DATABASE_URL: postgres://postgres:thos@localhost:5432/webEmpresa
      run: |
        python manage.py migrate
      working-directory: ./webempresa

    - name: Run Tests
      env:
        DATABASE_URL: postgres://postgres:thos@localhost:5432/webEmpresa
      run: |
        python manage.py test
      working-directory: ./webempresa

    # Despliegue a AWS EC2
    - name: Deploy to EC2
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

    - name: Connect to EC2 and Install System Dependencies
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
        sudo apt-get update
        sudo apt-get install -y libjpeg-dev zlib1g-dev libpng-dev python3-pip python3-venv nginx
        EOF

    - name: Connect to EC2 and Deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
        cd /path/to/your/project  # Cambia a la ruta correcta de tu proyecto en EC2
        git pull origin master  # Actualiza el código desde GitHub
        source venv/bin/activate  # Activa el entorno virtual
        pip install -r requirements.txt  # Instala las dependencias
        python manage.py migrate  # Ejecuta migraciones
        python manage.py collectstatic --noinput  # Recoge archivos estáticos
        sudo systemctl restart gunicorn  # Reinicia Gunicorn
        sudo systemctl restart nginx  # Reinicia Nginx
        EOF

    - name: Clean up Docker containers (if needed)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
        sudo docker system prune -af  # Usamos sudo para comandos Docker
        EOF
